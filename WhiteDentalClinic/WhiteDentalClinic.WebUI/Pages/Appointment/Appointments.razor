@attribute [Route(Routes.ProfileAppointments)]
@inject HttpClient Http
@using System.Text.Json
@using System.Text.Json.Serialization
@using WhiteDentalClinic.Shared.Models
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

@if (appointmentsByUser == null)
{
    <p><em>No appointments found.</em></p>
}
else
{
    <div class="main">
        @foreach (var app in appointmentsByUser.OrderBy(app => app.DateTime))
        {
            <div class="schedule">
                <div class="item">
                    <div class="meeting-time">
                        <div class="time">@app.DateTime.TimeOfDay - @app.DateTime.DayOfWeek.ToString()</div>
                        <div class="date">@app.DateTime.Day @app.DateTime.ToString("MMMM") @app.DateTime.Year</div>
                    </div>
                    <div class="customer-photo">
                        <img src="/img/customer.png">
                    </div>
                </div>
                <div class="item">
                    <div class="customer-name">
                        <div class="name">Contact us</div>
                        <div class="status">for more details</div>
                    </div>
                    <div class="action-icons">
                        <button> <a class="far fa-comment" href="mailto:email@email.com" title="Contact us by email"></a></button>
                        <button><i class="fas fa-phone" onclick="@(() => {NavManager.NavigateTo(Routes.Services);})" title="Contact us by phone"></i></button>
                    </div>
                </div>
                <div class="item">
                    <div class="meeting-subject">
                        @foreach (var item in appointmentsDetails)
                        {
                            if (app.MedicalServiceId == item.Id)
                            {
                                <div class="name">@item.Name</div>
                            }
                        }
                        <span class="subject">Duration: </span>
                        <span class="hours-number">30 min</span>
                    </div>
                    <div class="project-budget">
                        @foreach (var item in appointmentsDetails)
                        {
                            if (app.MedicalServiceId == item.Id)
                            {
                                <p> @item.Price $</p>
                            }
                        }
                    </div>
                </div>
                <div class="item">
                    <button class="btn btn-danger" type="button" onclick="@( () => DeleteClick(app.Id))">Delete</button>
                    <button class="btn btn-info" type="button" onclick="@( () => {NavManager.NavigateTo($"/Appointments/{app.Id}");})">Info</button>
                </div>
            </div>
        }
    </div>
}
@code {
    private List<AppointmentResponse> appointmentsByUser = new List<AppointmentResponse>();
    private List<Guid> appointmentListGuidWithDuplicates = new List<Guid>();
    private List<Guid> appointmentListGuidUnique = new List<Guid>();
    private List<ResponseServices> appointmentsDetails = new List<ResponseServices>();
    private string selectAppointmentToDelete = null;

    //by default a customer ID
    private Guid currentRequestId = Guid.Parse("9665bfd7-d60b-4557-b44e-80459d8c8e97");    //by default an ID but need to be modify (Dentist / Customer!)

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //take all appointments by current customer
            var temp = await Http.GetFromJsonAsync<ApiResult<IEnumerable<AppointmentResponse>>>($"/api/Appointments/customers/{currentRequestId}");
            appointmentsByUser = temp.Result.ToList();
            //take all details by appointments
            foreach (var app in appointmentsByUser)
            {
                appointmentListGuidWithDuplicates.Add(app.MedicalServiceId);
            }
            appointmentListGuidUnique = appointmentListGuidWithDuplicates.Distinct().ToList();
            foreach (var item in appointmentListGuidUnique)
            {
                var temp2 = await Http.GetFromJsonAsync<ApiResult<ResponseServices>>($"/api/MedicalServices/{item.ToString()}");
                appointmentsDetails.Add(temp2.Result);
            }

        }
        catch (Exception ex)
        {
            //var temp = await Http.GetFromJsonAsync<ApiResult<IEnumerable<AppointmentResponse>>>($"/api/Appointments/dentists{currentRequestId}");
            //appointmentsByUser = temp.Result.ToList();
        }
    }

    protected async Task DeleteClick(Guid selectAppointmentToDelete)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm
        if (confirmed)
        {
            string uriApp = selectAppointmentToDelete.ToString();
            await Http.DeleteAsync($"/api/Appointments?appointmentId={selectAppointmentToDelete}");
            Thread.Sleep(1000);
            NavManager.NavigateTo(Routes.Index);
        }
        else
        {
            NavManager.NavigateTo(Routes.Index);
        }
    }
}

<link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700" rel="stylesheet">
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
<style>
    .main {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(2, 1fr);
        column-gap: 1.25rem;
        row-gap: 0.5em;
    }

    .line {
        display: flex;
    }

    .schedule {
        display: flex;
        flex-direction: column;
        width: 320px;
        height: 280px;
        background: white;
        margin: 20px auto;
        border-radius: 5px;
        -webkit-box-shadow: 0px 0px 71px -7px rgba(0,0,0,0.68), inset 0px 16px 89px -32px rgba(224,228,236,1);
        -moz-box-shadow: 0px 0px 71px -7px rgba(0,0,0,0.68), inset 0px 16px 89px -32px rgba(224,228,236,1);
        box-shadow: 0px 0px 71px -7px rgba(0,0,0,0.68), inset 0px 16px 89px -32px rgba(224,228,236,1);
    }

    .item {
        flex: 1 1 40px;
        height: 10px;
        padding: 2px 18px;
        display: flex;
        align-items: center;
    }

        .item:last-child {
            justify-content: space-around;
        }

        .item:not(:last-child) {
            justify-content: space-between;
            border-bottom: 1px solid #f0f2f7;
        }

    .customer-photo {
        width: 52px;
        height: 52px;
        border-radius: 50%;
        overflow: hidden;
        img

    {
        width: auto;
        height: 100%;
    }

    }

    .time {
        font-weight: 600;
    }

    .date {
        font-size: 0.8rem;
        color: #8c91a3;
    }

    .name {
        font-weight: 600;
    }

    .status {
        text-transform: uppercase;
        font-size: 0.7rem;
        color: #8c91a3;
    }

    .action-icons {
        display: flex;
        width: 65px;
        font-size: 1.2rem;
        justify-content: space-between;
        .fa-comment

    {
        color: #7057d2;
        cursor: pointer;
    }

    .fa-phone {
        color: #29b4b5;
        cursor: pointer;
    }

    }

    .meeting-subject {
        .subject

    {
        color: #a3a7b5;
    }

    .hours-number {
        padding: 1px 6px;
        border-radius: 4px;
        border: 1px solid #d8d9de;
        font-weight: 600;
        margin-left: 7px;
    }

    }

    .project-budget {
        font-weight: 600;
        color: #29b4b5;
    }</style>